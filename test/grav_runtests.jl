#--------------------------------------------------------#
#---------------------PACKAGE-TESTS----------------------#
#--------------------------------------------------------#


using MagGravPoly.MG2D
using LinearAlgebra

########################################

function grav_testfwd1()

    rho = [2000.0]

    N=30
    xzobs = hcat(LinRange(0.0,1000.0,N), -10.0*ones(N))

    vertices  = [350.0 500.0;
                 650.0 500.0;
                 800.0 350.0;
                 650.0 200.0;
	         350.0 200.0;
	         200.0 350.0]

    ind1 = collect(1:6)
    bodyindices = [ind1]
    pbody = GravPolygBodies2D(bodyindices,vertices,rho,ylatext=nothing)

    ## compute grav anomaly (superposition of tgrav of bodies)
    tgrav = tgravpolybodies2D(xzobs,pbody)

    ##----------------------------------------------------------

    ## kg/m^3
    tgrav_ref =  [3.600475168234656,
                  3.9450373671440104,
                  4.3251332953639885,
                  4.7412792682747025,
                  5.192184629554951,
                  5.674017703228131,
                  6.179640472625836,
                  6.697963495128077,
                  7.213681304930219,
                  7.707753168470779,
                  8.15894411557204,
                  8.54632236945379,
                  8.851916368108949,
                  9.062441467534503,
                  9.16962482678878,
                  9.169624826788777,
                  9.062441467534487,
                  8.851916368108892,
                  8.546322369453726,
                  8.158944115571963,
                  7.7077531684706875,
                  7.213681304930125,
                  6.69796349512798,
                  6.17964047262573,
                  5.674017703228024,
                  5.192184629554854,
                  4.7412792682745915,
                  4.325133295363881,
                  3.9450373671439056,
                  3.6004751682345533]


    ##----------------------------------------------
    # Check if tgrav calc match tgrav ref (test passed)
    same = all(tgrav.≈tgrav_ref)
    
    if same
        return true
    else
        @show tgrav.-tgrav_ref
        display(tgrav)
        return false
    end
end


#######################################################################

function grav_testfwd2()
   
    rho = [2000.0,3000.0,1000.0]

    N=30
    xzobs = hcat(LinRange(0.0,1000.0,N), -10.0*ones(N))

    vertices  = [390.9767752377201 130.278991954030298;         
	         430.21168888652307 130.402291449170173;  
	         430.317652312473136 140.739290679698811;  
	         430.546649812203974 130.203638738574346;  
	         430.91560484766585 130.172384962659983;  
	         440.14344907863333 130.366977100309308;  
	         440.40792260208563 140.433477629153117;  
	         440.69197601158024 130.41736322165884;   
	         430.051984435135324 120.28972077523347;   
	         410.64196146829342 110.82578388310931;   
	         400.0 100.0;                
	         510.593762919577486 120.985398228772771; 
	         520.893379913843816 110.074145035188602;  
	         530.03238448156978 100.749216912218833;  
	         530.17394928686575 100.785849813929147;  
	         530.21679397938986 100.936364994289892;  
	         530.31684510201022 100.901007653562868;  
	         520.164999382907524 90.566098324208415;   
	         510.69760101144281 100.0;                
	         600.559336241924306 250.07742274155419; 
	         650.61740252955528 250.405022500973224; 
	         660.6522482157798 240.330905878795054; 
	         660.99370462700534 220.430809598897174; 
	         670.95964200423342 200.871100638551827; 
	         680.41821282760033 200.46729028637734;  
	         670.67999306568265 200.187645182621033; 
	         670.42746927845577 190.369846341974842; 
	         650.71882888409377 170.507867891105946; 
	         650.63379439530597 160.85561419292242;  
	         650.52497931177504 140.899927178489119; 
	         640.20104498482468 120.937540781866952; 
	         620.56031603648637 110.598110231234838; 
	         600.78820427692065 100.0]

    ind1 = collect(1:11)
    ind2 = collect(12:19)
    ind3 = collect(20:33)
    bodyindices = [ind1,ind2,ind3]
    pbody = GravPolygBodies2D(bodyindices,vertices,rho,ylatext=[-1200,500])

    ## compute grav anomaly (superposition of tgrav of bodies)
    tgrav = tgravpolybodies2D(xzobs,pbody)
    
     ##----------------------------------------------------------

    ## kg/m^3
    tgrav_ref =  [0.04983005193569039,
                  0.057161713536869226,
                  0.06605258254715332,
                  0.07695523362399866,
                  0.09049083767717374,
                  0.10752077324508758,
                  0.1292402756834802,
                  0.15726960584774166,
                  0.19362703160016898,
                  0.24021841454127496,
                  0.29711822888350814,
                  0.3597319840113954,
                  0.41956327606664645,
                  0.47315464771643256,
                  0.524520194535044,
                  0.5724053177044083,
                  0.6087427457798263,
                  0.6277987774728115,
                  0.6215901415276529,
                  0.583726400016095,
                  0.5206344581588951,
                  0.4469330222896053,
                  0.3749355580681389,
                  0.31107184855224135,
                  0.2572903341239047,
                  0.21319677426283354,
                  0.17748518462907056,
                  0.1486680686462772,
                  0.12538316790309645,
                  0.10648896266699731]


    ##----------------------------------------------
    # Check if tgrav calc match tgrav ref (test passed)
    same = all(tgrav.≈tgrav_ref)
    
    if same
        return true
    else
        @show tgrav.-tgrav_ref
        display(tgrav)
        return false
    end
end


###############################################################

function grav_testgrad()

    ADkind = ["FWDdiff","REVdiffTAPEcomp","REVdiffTAPE"] #["FWDdiff","REVdiffTAPEcomp","REVdiffTAPE"]
    nADkind = length(ADkind)

    ##  Definition of the problem
    rho = [200.0,100.0]

    N=30
    xzobs = hcat(LinRange(0.0,100.0,N), -1.0*ones(N))

    vertices  = [35.0 90.0;
                 65.0 90.0;
                 65.0 60.0;
	         35.0 60.0;
                 35.0 50.0;
                 65.0 50.0;
                 80.0 35.0;
                 65.0 20.0;
	         35.0 20.0;
	         20.0 35.0]

    verticesref  = [45.0 100.0;
                    75.0 100.0;
                    75.0 70.0;
	            45.0 70.0;
                    45.0 60.0;
                    75.0 60.0;
                    90.0 45.0;
                    75.0 30.0;
	            45.0 30.0;
	            30.0 45.0]

    ind1 = collect(1:4)
    ind2 = collect(5:10)
    bodyindices = [ind1,ind2]

    ylatext = 500.0
    pbody = GravPolygBodies2D(bodyindices,vertices,rho,ylatext=ylatext)
    pbodyref = GravPolygBodies2D(bodyindices,verticesref,rho,ylatext=ylatext)

    ## compute grav anomaly (superposition of tgrav of bodies)
    tgravref = tgravpolybodies2D(xzobs,pbodyref)

    # define gravmisf structure
    Cdinv = diagm(1/0.5 .* ones(length(tgravref)))
    gravmisf = Grav2DPolyMisf(bodyindices,xzobs,tgravref,Cdinv,:all)

    ∇msfref=[ [-0.0002286859596704923, 0.00019996709697832373, 0.00022023210761537205, -0.00025898470525820424, -9.344658994796331e-5, 6.495753701228907e-5, 0.00012483494335618152, 7.973631549624062e-5, -0.0001407015899296865, -0.00022218062155827386, 0.0004278843354246336, -3.695415165818103e-5, 2.3088949574086005e-5, -0.0005758106965952301, 0.0004158528125057766, 6.145393111868175e-5, -4.532554496655636e-6, -0.0001760765676989989, -0.0006047143277023843, -2.2276015694794807e-5, 6.94576078808264e-5, 0.00018179875704277897],
              [-0.0002286859596704921, 0.0001999670969783236, 0.00022023210761537194, -0.00025898470525820435, -9.344658994796332e-5, 6.495753701228911e-5, 0.00012483494335618146, 7.973631549624055e-5, -0.00014070158992968645, -0.00022218062155827375, 0.0004278843354246336, -3.695415165818097e-5, 2.3088949574085978e-5, -0.00057581069659523, 0.0004158528125057765, 6.145393111868176e-5, -4.532554496655587e-6, -0.00017607656769899887, -0.0006047143277023841, -2.227601569479486e-5, 6.945760788082639e-5, 0.00018179875704277897],
              [-0.0002286859596704921, 0.0001999670969783236, 0.00022023210761537194, -0.00025898470525820435, -9.344658994796332e-5, 6.495753701228911e-5, 0.00012483494335618146, 7.973631549624055e-5, -0.00014070158992968645, -0.00022218062155827375, 0.0004278843354246336, -3.695415165818097e-5, 2.3088949574085978e-5, -0.00057581069659523, 0.0004158528125057765, 6.145393111868176e-5, -4.532554496655587e-6, -0.00017607656769899887, -0.0006047143277023841, -2.227601569479486e-5, 6.945760788082639e-5, 0.00018179875704277897]]  
   

    # model parameters vector definition
    modpar = MG2D.gravstruct2vec(gravmisf.whichpar,pbody) 

    # gradient of misfit calculation
    ∇msf = [zeros(length(modpar)) for i=1:nADkind]

    sameres = zeros(Bool,3)
    for j in 1:nADkind

        autodiffstuff = precalcADstuffgrav(gravmisf,ADkind[j],modpar)

        println("Computing gradient...AD kind: ",ADkind[j])
        ∇msf[j] .= calc∇misfgrav(gravmisf,modpar,ADkind[j],autodiffstuff)

        sameres[j] = all(∇msf[j].≈∇msfref[j])
    end

    if all(sameres)
        return true
    else
        for k=1:length(sameres)
            if sameres[k]==false
                println("Failed for AutoDiff type: $(ADkind[k]))")
            end
        end
        return false
    end
end

#############################################################################

